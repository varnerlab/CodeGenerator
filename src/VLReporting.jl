import Base.+

function +(buffer::Array{String,1},content::String)
    push!(buffer,content)
end

function write_debug_report(path_to_reaction_file::String, path_to_debug_file::String, netid::String="jdv27")

    # TODO - is the reaction file path legit?
    if (isempty(path_to_reaction_file) == true || length(path_to_reaction_file) == 1)
        error_message = "ERROR: Path to reaction file is empty"
        throw(error(error_message))
    end

    # ok, so let's build a report!
    report_buffer = String[]
    +(report_buffer,"// Debug report for $(basename(path_to_reaction_file))")
    +(report_buffer,"// Generated by user: $(netid)")
    +(report_buffer,"// Generated on date: $(Dates.now())")
    +(report_buffer,"")

    # build the reaction array -
    reaction_array = parse_vff_reaction_file(path_to_reaction_file)
    +(report_buffer,"// REACTIONS START ---------------------------------------- // ")
    counter = 1
    for reaction::VLReaction in reaction_array

        # get the reaction string -
        reaction_string = reaction.reaction

        # create new line -
        line = "$(counter),$(reaction_string)"

        # cache -
        +(report_buffer,line)

        # counter -
        counter = counter + 1
    end
    +(report_buffer,"// REACTIONS END ------------------------------------------ // ")
    +(report_buffer,"")

    # build the symbol array -
    +(report_buffer,"// SPECIES START ------------------------------------------ // ")
    +(report_buffer,"// index,symbol")
    symbol_array = build_symbol_array(reaction_array)
    counter = 1
    for symbol::VLSpeciesSymbol in symbol_array

        # get the symbol lexeme -
        lexeme = symbol.lexeme

        # create new line -
        line = "$(counter),$(lexeme)"

        # cache -
        +(report_buffer,line)

        # counter -
        counter = counter + 1
    end
    +(report_buffer,"// SPECIES END -------------------------------------------- // ")

    # ok, write -
    outfile = open(path_to_debug_file, "w")
    for report_line in report_buffer
        println(outfile,report_line)
    end
    close(outfile)

end
